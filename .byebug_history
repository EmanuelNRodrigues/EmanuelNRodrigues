q!
user.errors
user.valid?
user.errors
      user = build(:user, email: 'test@abc')
user.errors[:email]
user.errors
user
user.valid?
user
q!
is_expected.to validate_inclusion_of(:role).in_array(["admin", "client"]).with_message(Message::ERROR[:role_inclusion])
is_expected.to validate_inclusion_of(:role).in_array(["admin, "client"]).with_message(Message::ERROR[:role_inclusion])
is_expected.to validate_inclusion_of(:role).in_array([admin]).with_message(Message::ERROR[:role_inclusion])
is_expected.to validate_inclusion_of(:role).in_array([0, 123456789]).with_message(Message::ERROR[:role_inclusion])
is_expected.to validate_inclusion_of(:role).in_array([0, 1]).with_message(Message::ERROR[:role_inclusion])
).with_message(Message::ERROR[:role_inclusion])
is_expected.to validate_inclusion_of(:role).in_array(User.roles.values).with_message(Message::ERROR[:role_inclusion])
[200~is_expected.to validate_inclusion_of(:role).in_array(User.roles.values).with_message(Message::ERROR[:role_inclusion])~
      is_expected.to validate_inclusion_of(:role).in_array(User.roles.keys)
      is_expected.to validate_inclusion_of(:role).in_array(User.roles.keys) } }
      is_expected.to validate_inclusion_of(:role).in_array(User.roles.keys) }
is_expected
User.roles.values
User.roles
User
c
q!
Message::ERROR
Message
Message.ERROR
ERROR
q!
c
App
App::Helpers
Helpers
