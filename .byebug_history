q!
get users_path
q!
get '/index'
endpoint: users_path
get :index, endpoint: users_path
get :index, url: users_path
get :index
get 'test.host/users'
c!
c
users_path
q!
get :index
get users_path
users_path
q!
users_path
q!
post :index
post :index, header: users_path
post :index, headers: users_path
post :index
UsersController.index
UsersController
get '/users'
get users_path
users_path
q!
projects_path
project_path
users_path
user_path
users_path
user_id_path
users_id_path
users_path
q!
rails routes
rails routes | grep users
user_path
users_path
users_[ath
users_index_url
users_index_path
users_path
get :index, endpoint: index_api
get :index
c
User.count
User.count]
c
User.count
User.destroy(params.required(:id))
User.count
User
q!
params.required(:id)
q!
User.destroy()
User.destroy(@user)
@user
@user.destroy
@user.destroy!
@user
n
@user
q!
c
q!
JSON(response.body).except('updated_at')
JSON(response.body).except('updated_by')
JSON(response.body)
user.attributes
user
q!
response.body
response
c
User.last
User.count
c
user
q!
user
user.id
user
user.id
user
user.select(:id)
        expect(JSON(response.body)).to include( user.attributes)
user.attributes
JSON(response.body)
response.body
response
q!
response.body
response
JSON(response.body)
user.attributes
user.attributes.pluck(:id)
user.attributes
user
q!
new_user.errors.messages
new_user.errors.message
new_user.errors
new_user.validate
new_user.validate?
    new_user = User.create(permited_params)
new_user
new_user = User.create!(permited_params)
q!
new_user
e
e.message
e.messages
e.error
e.errors
 e.message
 e
q!
new_user.errors.messages
new_user.errors.message
new_user.errors
new_user.error
new_user.messages
new_user.message
new_user = User.create!(permited_params)
new_user.errors
new_user
new_user = User.create(permited_params)
User.create(permited_params)
    new_user.save!
    new_user = User.new(permited_params)
q!
create_params
create_params[:role] = 'error'
create_params[:role]
create_params.role
create_params
c
User.last
User.last.symbolize
User.last.attributes.symbolize
c
create_params
q!
params
c
params
q!
params
q!
JSON(response.body)
response.body
response.body.to_json
response.body.as_json
response.body
c
response.body
response
response.status
response
get :index
get :index, endpoint: ''
get :index, endpoint: 'RSpec.describe(AccountingDoc, type: :model) do
  describe 'associations' do
    it { is_expected.to(have_one(:document)) }
  end
get :index
get
q!
get :index, endpoint: 'users/1'
get :index
c
e.message
e
c
q!
    @user.update!(permited_params)
@user
c
q!
c
@user.update_attributes
@user
@user.attributes
@user
@user.update!(permited_params)
@user.save!
permited_params
@user
c
params.permit(%i[full_name role email])
params.require(%i[full_name role email])
params
c
params
c
params
params.require(%i[full_name role email])
params.require
params
c
params.require([:full_name, :role, :email])
params.require(:full_name, :role, :email)
params
c
params
c
params.require(:full_name)
params
cparams
c
q!
project.errors
project.errors.join
project.errors.joins
project.errors
q!
batata.errors
    errors.add(:end_date, message: ERROR[:end_date_validation])
ERROR[:end_date_validation]
ERROR
    errors.add(StandardError, message: ERROR[:end_date_validation] )
errors
    errors.add(StandardError, message: ERROR[:end_date_validation])
errors.add(:end_date, message: "batata")
errors
errors.add(:end_date)
errors
batata.errors
batata.valid?
batata = User.new
batata = build(:user, full_name: nil)
batata
batata.valid?
batata = build(:user, full_name: nil)
batata
batata = create(:user, full_name: nil)
errors.add(:end_date, ERROR[:end_date_validation])
ERROR[:end_date_validation]
ERROR
errors.add(StandardError, ERROR[:end_date_validation])
errors.add
errors
q!
end_date.blank?
end_date
q!
nil > start_date
end_date.present?
end_date > start_date
end_date
end_date.present?
