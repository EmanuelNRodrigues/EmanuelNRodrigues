c
q!
project.errors
project.errors.join
project.errors.joins
project.errors
q!
batata.errors
    errors.add(:end_date, message: ERROR[:end_date_validation])
ERROR[:end_date_validation]
ERROR
    errors.add(StandardError, message: ERROR[:end_date_validation] )
errors
    errors.add(StandardError, message: ERROR[:end_date_validation])
errors.add(:end_date, message: "batata")
errors
errors.add(:end_date)
errors
batata.errors
batata.valid?
batata = User.new
batata = build(:user, full_name: nil)
batata
batata.valid?
batata = build(:user, full_name: nil)
batata
batata = create(:user, full_name: nil)
errors.add(:end_date, ERROR[:end_date_validation])
ERROR[:end_date_validation]
ERROR
errors.add(StandardError, ERROR[:end_date_validation])
errors.add
errors
q!
end_date.blank?
end_date
q!
nil > start_date
end_date.present?
end_date > start_date
end_date
end_date.present?
c
q!
project
project.save
c
project.valid?
project
q!
project
user
q!
      project = build(:project, end_date: nil)
      project = build(:project, end_date: nil).save
      project = build(:project, end_date: nil)
      project = build!(:project, end_date: nil)
      project = build(:project, end_date: nil)
project2.valid?
project2 = create(:project, start_date:nil)
project
project.valid?
project = create(:project, start_date:nil)
q!
project.valid?
q!
project.errors
project.valid?
      project = build(:project, end_date: nil, user_id: create(:user))
project.errors
project.valid?
      project = build(:project, end_date: nil, user_id: 1)
project
User.name
User.count
create(:project)
Project
Project.first
User.count
c
q!
project.errors
project.valid?
project
c
build(:project, end_date: nil)
build(:project, end_date: null)
build(:project)
build(:project, end_date: null)
q!
user.errors
user.valid?
user.errors
      user = build(:user, email: 'test@abc')
user.errors[:email]
user.errors
user
user.valid?
user
q!
is_expected.to validate_inclusion_of(:role).in_array(["admin", "client"]).with_message(Message::ERROR[:role_inclusion])
is_expected.to validate_inclusion_of(:role).in_array(["admin, "client"]).with_message(Message::ERROR[:role_inclusion])
is_expected.to validate_inclusion_of(:role).in_array([admin]).with_message(Message::ERROR[:role_inclusion])
is_expected.to validate_inclusion_of(:role).in_array([0, 123456789]).with_message(Message::ERROR[:role_inclusion])
is_expected.to validate_inclusion_of(:role).in_array([0, 1]).with_message(Message::ERROR[:role_inclusion])
).with_message(Message::ERROR[:role_inclusion])
is_expected.to validate_inclusion_of(:role).in_array(User.roles.values).with_message(Message::ERROR[:role_inclusion])
[200~is_expected.to validate_inclusion_of(:role).in_array(User.roles.values).with_message(Message::ERROR[:role_inclusion])~
      is_expected.to validate_inclusion_of(:role).in_array(User.roles.keys)
      is_expected.to validate_inclusion_of(:role).in_array(User.roles.keys) } }
      is_expected.to validate_inclusion_of(:role).in_array(User.roles.keys) }
is_expected
User.roles.values
User.roles
User
c
q!
Message::ERROR
Message
Message.ERROR
ERROR
q!
c
App
App::Helpers
Helpers
